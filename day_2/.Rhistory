## simple utility function to read all md files in a folder then
## concatenate these files and write the concatenated file as an md
## finally, render this md as html
read_and_write_md <- function(path = ".",
md_file = "full_markdown.md",
html_file = "full_markdown.html"){
# find all files with .md extension
files_in_dir <- dir(path = path)
all_mds <- files_in_dir[
grepl(pattern = ".md", x = files_in_dir, fixed = TRUE)
]
# read each md file, then concatenate
mds_concat <- do.call('c', sapply(all_mds, readLines))
# write file
writeLines(mds_concat, file.path(path, file))
# render md file to html
rmarkdown::render(input = file.path(path, file),
output_format = 'html_document',
output_file = file.path(path, html_file))
}
setwd('.//day_2')
getwd()
read_and_write_md(md_file = "day2_concat.md",
html_file = "day2_concat.html")
## simple utility function to read all md files in a folder then
## concatenate these files and write the concatenated file as an md
## finally, render this md as html
read_and_write_md <- function(path = ".",
md_file = "full_markdown.md",
html_file = "full_markdown.html"){
# find all files with .md extension
files_in_dir <- dir(path = path)
all_mds <- files_in_dir[
grepl(pattern = ".md", x = files_in_dir, fixed = TRUE)
]
# read each md file, then concatenate
mds_concat <- do.call('c', sapply(all_mds, readLines))
# write file
writeLines(mds_concat, file.path(path, md_file))
# render md file to html
rmarkdown::render(input = file.path(path, md_file),
output_format = 'html_document',
output_file = file.path(path, html_file))
}
read_and_write_md(md_file = "day2_concat.md",
html_file = "day2_concat.html")
## simple utility function to read all md files in a folder then
## concatenate these files and write the concatenated file as an md
## finally, render this md as html
## TODO some files are not properly separated, maybe default to always add
## one blank "" line between each file??
read_and_write_md <- function(path = ".",
md_file = "full_markdown.md",
html_file = "full_markdown.html"){
# find all files with .md extension
files_in_dir <- dir(path = path)
all_mds <- files_in_dir[
grepl(pattern = ".md", x = files_in_dir, fixed = TRUE)
]
# read each md file, then concatenate
# for each md file, we insert a blank line before and after the text
mds_concat <- do.call('c',
sapply(all_mds, FUN = function(m) c("",
readLines(m),
"")))
# write file
writeLines(mds_concat, file.path(path, md_file))
# render md file to html
rmarkdown::render(input = file.path(path, md_file),
output_format = 'html_document',
output_file = file.path(path, html_file))
}
read_and_write_md(md_file = "day2_concat.md",
html_file = "day2_concat.html")
getwd()
setwd('..')
getwd()
setwd('.//day_1')
read_and_write_md(md_file = "day1_concat.md",
html_file = "day1_concat.html")
setwd('..//day_2')
gewtd()
getwd()
read_and_write_md(md_file = "day2_concat.md",
html_file = "day2_concat.html")
library(rpart)
library(ggplot2)
set.seed(123)
x1 <- runif(1000)
x2 <- runif(1000)
y <- ifelse(sqrt((x1-0.5)^2 + (x2-0.5)^2) <= 0.25, 'Y', 'N')
full_dat <- data.frame(x1, x2, y)
plot(x1, x2, col = 1 + as.numeric(y == 'Y'))
# rpart(y ~ ., data = full_dat)
boot_pred <- function(data = full_dat){
boot_mod <- rpart(y ~ ., data = data[sample(nrow(data), replace = T),])
predict(boot_mod, newdata = data, type = 'class')
}
iters <- 1000
mat_preds <- do.call('cbind',
lapply(1:iters, FUN = function(i) boot_pred()))
apply(mat_preds, 1, FUN = function(class){
names(sort(table(class), decreasing = TRUE))[1]
})
final_class <- apply(mat_preds, 1, FUN = function(class){
names(sort(table(class), decreasing = TRUE))[1]
})
head(final_class)
table(final_class)
table(y)
plot(x1, x2, col = 1 + as.numeric(y == 'Y'))
plot(x1, x2, col = final_class)
grid_data <- data.frame(x1 = seq(0,1,.001),
x2 = seq(0,1,.001))
grid_data <- expand.grid(x1 = seq(0,1,.005),
x2 = seq(0,1,.005))
dim(grid_data)
plot(grid_data)
grid_data2 <- grid_data
grid_data2$y <- sample(c('y','n'), 40401, replace = TRUE)
library(tidyverse)
grid_data2 %>%
ggplot(aes(x1, x2, fill = y))+
geom_raster()
library(rpart)
library(ggplot2)
set.seed(123)
x1 <- runif(1000)
x2 <- runif(1000)
y <- ifelse(sqrt((x1-0.5)^2 + (x2-0.5)^2) <= 0.25, 'Y', 'N')
full_dat <- data.frame(x1, x2, y, stringsAsFactors = FALSE)
full_dat %>%
ggplot(aes(x1, x2, fill = y))+
geom_raster()
dim(full_data)
head(full_dat)
summary(full_dat)
full_dat <- data_frame(x1, x2, y)
full_dat %>%
ggplot(aes(x1, x2, fill = y))+
geom_raster()
full_dat %>%
ggplot(aes(x1, x2))+
geom_raster()
grid_data %>%
ggplot(aes(x1, x2))+
geom_raster()
data_frame(x = runif(1000), y = runif(1000)) %>%
ggplot(aes(x, y))+
geom_raster()
full_dat %>%
arrange(x1)
full_dat %>%
arrange(x1) %>%
ggplot(aes(x1, x2))+
geom_raster()
library(rpart)
library(ggplot2)
set.seed(123)
x1 <- runif(1000)
x2 <- runif(1000)
y <- ifelse(sqrt((x1-0.5)^2 + (x2-0.5)^2) <= 0.25, 'Y', 'N')
full_dat <- data_frame(x1, x2, y)
plot(x1, x2, col = 1 + as.numeric(y == 'Y'))
grid_data <- expand.grid(x1 = seq(0,1,.005),
x2 = seq(0,1,.005))
# rpart(y ~ ., data = full_dat)
boot_pred <- function(data = full_dat, pred_data = grid_data){
boot_mod <- rpart(y ~ ., data = data[sample(nrow(data), replace = T),])
predict(boot_mod, newdata = grid_data, type = 'class')
}
iters <- 1000
mat_preds <- do.call('cbind',
lapply(1:iters, FUN = function(i) boot_pred()))
final_class <- apply(mat_preds, 1, FUN = function(class){
names(sort(table(class), decreasing = TRUE))[1]
})
head(final_class)
grid_data %>%
mutate(class_pred = final_class)
grid_data %>%
mutate(class_pred = final_class) %>%
ggplot(aes(x1, x2, fill = class_pred))+
geom_raster()
grid_data %>%
mutate(class_pred = final_class) %>%
ggplot(aes(x1, x2, fill = class_pred))+
geom_raster()+
geom_point(data = full_dat)
grid_data %>%
mutate(class_pred = final_class) %>%
ggplot(aes(x1, x2, fill = class_pred))+
geom_raster()+
geom_point(data = full_dat,
aes(x = x1, y = x2), inherit.aes = FALSE)
grid_data %>%
mutate(class_pred = final_class) %>%
ggplot(aes(x1, x2, fill = class_pred))+
geom_raster()+
geom_point(data = full_dat,
aes(x = x1, y = x2,
colour = y), inherit.aes = FALSE)
grid_data %>%
mutate(class_pred = final_class) %>%
ggplot(aes(x1, x2, fill = class_pred))+
geom_raster()+
geom_point(data = full_dat,
aes(x = x1, y = x2,
colour = y), inherit.aes = FALSE)+
scale_colour_brewer(palette = 'Set1')
final_class_one_tree <- predict(rpart(y ~ ., data = full_dat),
newdata = grid_data)
grid_data %>%
mutate(class_pred = final_class) %>%
ggplot(aes(x1, x2, fill = class_pred))+
geom_raster()+
geom_point(data = full_dat,
aes(x = x1, y = x2,
colour = y), inherit.aes = FALSE)+
scale_colour_brewer(palette = 'Set1')+
ggtitle('Results using voting from bootstrapped decision trees')
grid_data %>%
mutate(class_pred = final_class_one_tree) %>%
ggplot(aes(x1, x2, fill = class_pred))+
geom_raster()+
geom_point(data = full_dat,
aes(x = x1, y = x2,
colour = y), inherit.aes = FALSE)+
scale_colour_brewer(palette = 'Set1')+
ggtitle('Results using voting from one decision tree')
final_class_one_tree
final_class_one_tree <- predict(rpart(y ~ ., data = full_dat),
newdata = grid_data,
type = 'class')
grid_data %>%
mutate(class_pred = final_class_one_tree) %>%
ggplot(aes(x1, x2, fill = class_pred))+
geom_raster()+
geom_point(data = full_dat,
aes(x = x1, y = x2,
colour = y), inherit.aes = FALSE)+
scale_colour_brewer(palette = 'Set1')+
ggtitle('Results using voting from one decision tree')
library(gbm)
library(xgboost)
?xgboost
?glm
f1 <- glm(y ~ ., data = full_data)
f1 <- glm(y ~ ., data = full_dat)
full_dat2 <- full_dat
full_dat %>%
ggplot(aes(x1, x2, colour = y))+geom_point()
full_dat2 <- full_dat
full_dat2$y <- as.numeric(full_dat$y == 'Y')
f1 <- glm(y ~ ., data = full_dat2, family = 'binomial')
summary(f1)
resid(f1)
plot(resid(f1))
?residuals.glm
summary(resid(f1, 'deviance'))
summary(resid(f1, 'pearson'))
plot(f1)
f2 <- update(f1, .~., weights = abs(resid(f1)))
summary(f2)
plot(f2)
predict(f1, type = 'response')
mean(full_dat$y)
mean(full_dat2$y)
full_dat3 <- full_dat2 %>%
mutate(pred = predict(f1, type = 'response'))
full_dat3 %>%
ggplot(aes(x1, x2, colour = pred))+geom_point()
full_dat3 %>%
ggplot(aes(x1, x2, colour = pred))+geom_point()+
scale_fill_distiller(palette = 'Reds', direction = 1)
full_dat3 %>%
ggplot(aes(x1, x2, colour = pred))+geom_point()+
scale_color_distiller(palette = 'Reds', direction = 1)
f1 <- glm(y ~ x1 * x2 + I(x1 ^ 2)+I(x2^2),
data = full_dat2, family = 'binomial')
summary(f1)
